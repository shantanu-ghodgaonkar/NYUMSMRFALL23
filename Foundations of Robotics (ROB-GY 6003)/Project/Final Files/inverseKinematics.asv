function result = inverseKinematics(pose)
    % Define symbolic representation of EE transformation in Base,
    % subsitute 0 for the EE joint so that we have less to worry about
    syms theta1 theta2 theta3 theta4 theta5 theta6 theta7;
    dhTable = [theta1 .36 0 -pi/2;
           theta2 0 0 pi/2;
           theta3   .42 0 pi/2;
           theta4   0   0 -pi/2;
           theta5   .4  0 -pi/2;
           theta6   0   0  pi/2;
           theta7   .126 0  0];
    Tbe = MakeTransformOfEEinB(dhTable);
    Tbe = subs(Tbe,theta7,0);
    result = [-1 -1 -1 -1 -1 -1];
    while not(result(1)<(pi/2)) | (result(1)>(3*pi/4)) & 
% 6 Equations to define theta 1 - 6
    F1 = [-sin(pose(2)) == Tbe(3,1);
        sin(pose(1))*cos(pose(2)) == Tbe(2,1);
        cos(pose(2))*sin(pose(3)) == Tbe(3,2);
            sin(pose(1))*sin(pose(2))*cos(pose(3)) - cos(pose(1))*sin(pose(3)) == Tbe(2,3);
          cos(pose(1))*cos(pose(2)) == Tbe(1,1);
          cos(pose(2))*cos(pose(3)) == Tbe(3,3)];

    F2 = [cos(pose(1))*sin(pose(2))*sin(pose(3)) - sin(pose(1))*cos(pose(3)) == Tbe(1,2);
          sin(pose(1))*sin(pose(2))*sin(pose(3)) + cos(pose(1))*cos(pose(3)) == Tbe(2,2);
          cos(pose(1))*sin(pose(2))*cos(pose(3)) + sin(pose(1))*sin(pose(3)) == Tbe(1,3);
          pose(4) == Tbe(1,4);
          pose(5) == Tbe(2,4);
          pose(6) == Tbe(3,4)];
    digits(2);
    firstsol = vpasolve(F1,'Random',true);
    
    

    firstSol = [mod(double(firstsol.theta1),2*pi) mod(double(firstsol.theta2),2*pi) mod(double(firstsol.theta3),2*pi) mod(double(firstsol.theta4),2*pi) mod(double(firstsol.theta5),2*pi) mod(double(firstsol.theta6),2*pi)];
    digits(5)
    sol = vpasolve(F2,[theta1 theta2 theta3 theta4 theta5 theta6], firstSol);
    result = [mod(double(sol.theta1),2*pi) mod(double(sol.theta2),2*pi) mod(double(sol.theta3),2*pi) mod(double(sol.theta4),2*pi) mod(double(sol.theta5),2*pi) mod(double(sol.theta6),2*pi)];

end